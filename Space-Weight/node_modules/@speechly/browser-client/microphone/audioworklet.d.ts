declare const _default: "\n// Indices for the Control SAB.\nconst CONTROL = {\n  'WRITE_INDEX': 0,\n  'FRAMES_AVAILABLE': 1,\n};\n\nclass SpeechlyProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n\n    this._initialized = false;\n    this.port.onmessage = this._initialize.bind(this);\n  }\n\n  _initialize(event) {\n    this.controlSAB = new Int32Array(event.data.controlSAB);\n    this.dataSAB = new Float32Array(event.data.dataSAB);\n    this._initialized = true;\n  }\n\n  _pushData(data) {\n    let inputWriteIndex = this.controlSAB[CONTROL.WRITE_INDEX];\n\n    if (inputWriteIndex + data.length < this.dataSAB.length) {\n      // Buffer has enough space to push the input.\n      this.dataSAB.set(data, inputWriteIndex);\n      this.controlSAB[CONTROL.WRITE_INDEX] += data.length;\n    } else {\n      // Buffer overflow\n      this.dataSAB.set(data, 0);\n      this.controlSAB[CONTROL.WRITE_INDEX] = 0;\n    }\n\n    // Update the number of available frames in the input buffer.\n    this.controlSAB[CONTROL.FRAMES_AVAILABLE] += data.length;\n  }\n\n  process(inputs, outputs, parameters) {\n    const inputChannelData = inputs[0][0];\n      if (inputChannelData !== undefined) {\n        if (this.controlSAB && this.dataSAB) {\n          this._pushData(inputChannelData);\n        } else {\n          this.port.postMessage(inputChannelData);\n        }\n      }\n      \n      return true;\n  }\n}\n\nregisterProcessor('speechly-worklet', SpeechlyProcessor);\n";
export default _default;
